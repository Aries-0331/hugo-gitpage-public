<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>crypto on urchinzhou</title>
    <link>https://urchinzhou.com/categories/crypto/</link>
    <description>Recent content in crypto on urchinzhou</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 04 Nov 2022 17:13:59 +0800</lastBuildDate><atom:link href="https://urchinzhou.com/categories/crypto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于QUIC Crypto</title>
      <link>https://urchinzhou.com/post/%E5%85%B3%E4%BA%8Equic-crypto/</link>
      <pubDate>Fri, 04 Nov 2022 17:13:59 +0800</pubDate>
      
      <guid>https://urchinzhou.com/post/%E5%85%B3%E4%BA%8Equic-crypto/</guid>
      <description>简要介绍 QUIC（Quick UDP Internet Connections）是一种默认加密的互联网传输协议，旨在提供安全、快速的 HTTP 传输，以替代 TCP 和 TLS。Goo</description>
    </item>
    
    <item>
      <title>关于加密和密码学的经验教训和误解</title>
      <link>https://urchinzhou.com/post/%E5%85%B3%E4%BA%8E%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AF%86%E7%A0%81%E5%AD%A6%E7%9A%84%E7%BB%8F%E9%AA%8C%E6%95%99%E8%AE%AD%E5%92%8C%E8%AF%AF%E8%A7%A3/</link>
      <pubDate>Tue, 21 Dec 2021 15:25:18 +0800</pubDate>
      
      <guid>https://urchinzhou.com/post/%E5%85%B3%E4%BA%8E%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AF%86%E7%A0%81%E5%AD%A6%E7%9A%84%E7%BB%8F%E9%AA%8C%E6%95%99%E8%AE%AD%E5%92%8C%E8%AF%AF%E8%A7%A3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文翻译自&lt;a href=&#34;https://security.stackexchange.com/questions/2202/lessons-learned-and-misconceptions-regarding-encryption-and-cryptology&#34;&gt;stackexchange&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;密码学是一个广泛复杂的主题，即使经验丰富的工程师在初步应用密码技术时也会犯错，而加密又是一个重要的行为，在这件事上犯错的代价往往是巨大的。因此本文旨在记录常见的密码应用误区、经验教训以及对于算法或API的谨慎选择。&lt;/p&gt;
&lt;h2 id=&#34;不要创造算法&#34;&gt;不要创造算法&lt;/h2&gt;
&lt;p&gt;不要发明自己的加密算法或协议，因为容易出错。加密算法很复杂，需要大量的严谨的审查以确保其安全性，通常自己发明的算法或协议，无法提供合理的数学推导以证明其安全。&lt;/p&gt;
&lt;p&gt;最佳选择是，使用标准加密算法和协议。通常一个标准算法的诞生，是为了解决曾经的某些问题，而这些问题很可能就是你所面临的，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 TLS 或 SSL 解决通信安全&lt;/li&gt;
&lt;li&gt;使用 GPG 或 PGP 解决静态数据安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些属于经过充分验证的密码方案，如果需要使用密码接口实现某些功能，优先考虑使用一些高级加密库，例如 cryptlib、GPGME、Keyczar等，而不是诸如 OpenSSL、CryptoAPI、JCE 等易于出错且难以应用的低级别库。&lt;/p&gt;
&lt;h2 id=&#34;不要使用非认证的加密&#34;&gt;不要使用非认证的加密&lt;/h2&gt;
&lt;p&gt;这是一种非常常见的错误——&lt;strong&gt;对数据进行加密而不进行认证&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如：某开发者想保护敏感信息，使用 AES-CBC 模式对该消息进行加密。&lt;/p&gt;
&lt;p&gt;该行为仅实现了消息的机密性，但却无法保证在面临主动攻击（如篡改）、重返攻击和反射攻击等威胁时的安全性。&lt;/p&gt;
&lt;p&gt;而增加消息认证即可解决该问题。&lt;/p&gt;
&lt;p&gt;许多线上系统出现过该问题导致的严重漏洞，如 &lt;a href=&#34;http://netifera.com/research/poet/ieee-aspnetcrypto.pdf&#34;&gt;ASP.NET&lt;/a&gt;, &lt;a href=&#34;https://crypto.stackexchange.com/q/1066/351&#34;&gt;XML&lt;/a&gt; &lt;a href=&#34;https://crypto.stackexchange.com/q/1042/351&#34;&gt;encryption&lt;/a&gt;, &lt;a href=&#34;http://www.informationweek.com/news/security/vulnerabilities/231901532&#34;&gt;Amazon EC2&lt;/a&gt;, &lt;a href=&#34;http://usenix.org/events/woot10/tech/full_papers/Rizzo.pdf&#34;&gt;JavaServer Faces, Ruby on Rails, OWASP ESAPI&lt;/a&gt;, &lt;a href=&#34;http://www.cs.columbia.edu/~smb/papers/badesp.ps&#34;&gt;IPSEC&lt;/a&gt;, &lt;a href=&#34;http://www.cs.berkeley.edu/~daw/papers/wep-mob01.pdf&#34;&gt;WEP&lt;/a&gt;, &lt;a href=&#34;https://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt&#34;&gt;ASP.NET again&lt;/a&gt;, 以及 &lt;a href=&#34;http://lasecwww.epfl.ch/pub/lasec/doc/Vau02a.ps&#34;&gt;SSH2&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;为了避免该问题，应该在每次加密时都使用消息认证，主流做法有以下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最简便的方式是，使用现成的加密认证方案，如 GCM、CWC、EAX、CCM、OCB，这些加密方法实现了加密的同时并对数据做认证，使用者无需再关心该问题；&lt;/li&gt;
&lt;li&gt;另一种方式是，自己实现消息认证。首先，使用适当的对称加密方法加密消息（例如AES-CBC），然后对密文数据生成消息认证码（如AES-CMAC, SHA1-HMAC, SHA256-HMAC），并在传输数据前，将生成的 MAC 摘要附在密文后。对于接收端，在解密数据前先验证 MAC 摘要的有效性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不要将一个密钥同时用于加密认证或签名&#34;&gt;不要将一个密钥同时用于加密、认证或签名&lt;/h2&gt;
&lt;p&gt;一个密钥不用该重用于多种目的，这种行为会扩大风险。&lt;/p&gt;
&lt;p&gt;例如，如果你有一对 RSA 公私钥对，不应该将其既用于加密又用于签名。如果你需要加密和签名这两种行为，那么就生成两对密钥。&lt;/p&gt;
&lt;p&gt;相应的，对于对称加密而言，不应该将用于加密的密钥，用于生成消息认证码。总而言之，不要将密钥重用与不同的目的。&lt;/p&gt;
&lt;h2 id=&#34;对拼接字符串做哈希要慎重&#34;&gt;对拼接字符串做哈希要慎重&lt;/h2&gt;
&lt;p&gt;例如，某开发者想获取字符串 S 和 T 的哈希值。于是他将 S 与 T 做拼接后进行哈希运算，获得H(S||T)。这是有缺陷的。&lt;/p&gt;
&lt;p&gt;问题在于，拼接使得两个字符串的边界不明确。例如 &lt;code&gt;builtin&lt;/code&gt;||&lt;code&gt;securely&lt;/code&gt; = &lt;code&gt;built&lt;/code&gt;||&lt;code&gt;insecurely&lt;/code&gt;，哈希运算无法识别字符串 S 和 T。因此攻击者或许可以改变两个字符串的边界而不改变哈希值。例如，如果 Alice 想发送两个字符串 &lt;code&gt;builtin &lt;/code&gt;和&lt;code&gt;securely&lt;/code&gt;，攻击者可以在不使哈希值失效的情况下将字符串改为&lt;code&gt;built&lt;/code&gt;和&lt;code&gt;insecurely&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在对拼接字符串进行数字签名或消息认证码运算是也会有类似的问题。&lt;/p&gt;
&lt;p&gt;解决办法是，不进行明文拼接，而是使用可以明确解码的编码。例如，当想计算H(S||T)时，不妨改为H(length(S)||S||T)，这里length(S)是一个32位值，用以表示字符串 S 的长度；亦或者采取 H(H(S)||H(T))、H(H(S)||T) 等方式。&lt;/p&gt;
&lt;p&gt;有关该问题的相关案例参见 &lt;a href=&#34;http://rdist.root.org/2009/05/20/amazon-web-services-signature-vulnerability/&#34;&gt;this flaw in Amazon Web Services&lt;/a&gt;、 &lt;a href=&#34;http://netifera.com/research/flickr_api_signature_forgery.pdf&#34;&gt;this flaw in Flickr&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;不要重用nonces或ivs&#34;&gt;不要重用nonces或IVs&lt;/h2&gt;
&lt;p&gt;许多加密模式需要 IV（初始化向量）。永远不要重复使用同一个 IV，这样会导致严重的漏洞。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于流密码而言，例如 CTR 或 OFB 模式，会导致加密数据被轻松恢复为明文&lt;/li&gt;
&lt;li&gt;对于 CBC 等其它模式而言，重用 IV 同样会造成明文恢复攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此不管使用什么加密模式，都不应该重用 IV。&lt;/p&gt;
&lt;h2 id=&#34;确保随机数生成器具备足够的熵&#34;&gt;确保随机数生成器具备足够的熵&lt;/h2&gt;
&lt;p&gt;确保使用密码伪随机数生成器来产生key、IV、nonce等，而不是使用&lt;code&gt;rand()&lt;/code&gt;, &lt;code&gt;random()&lt;/code&gt;, &lt;code&gt;drand48()&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;确保给随机数生成器注入足够的熵，不要使用日期作为种子，这是可预测的。&lt;/p&gt;
&lt;p&gt;例如：&lt;code&gt;srand(time(NULL))&lt;/code&gt;并不好，比较好的方式是给随机数生成器注入128位数据或真随机数，例如通过&lt;code&gt;/dev/urandom&lt;/code&gt;, &lt;code&gt;CryptGenRandom&lt;/code&gt;或其它类似工具。在 Java 中，使用 SecureRandom 而不是 Random。在 .NET 中，使用 System.Security.Cryptography.RandomNumberGenerator，而不是 System.Random。在 Python 中，使用 random.SystemRandom，而不是 random。&lt;/p&gt;
&lt;h2 id=&#34;对于对称加密不要使用ecb模式&#34;&gt;对于对称加密，不要使用ECB模式&lt;/h2&gt;
&lt;p&gt;例如，一图片数据的明文显示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/5/56/Tux.jpg&#34; alt=&#34;明文&#34;&gt;&lt;/p&gt;
&lt;p&gt;该数据经ECB模式加密后的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/f/f0/Tux_ecb.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该数据经CBC模式加密后的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/a/a0/Tux_secure.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;避免使用密码作为密钥&#34;&gt;避免使用密码作为密钥&lt;/h2&gt;
&lt;p&gt;一个常见的错误做法是，使用密码或密码的哈希值作为加密密钥。密钥需要有足够的熵，而大多数密码/口令并不具备，因此容易遭到字典攻击。&lt;/p&gt;
&lt;p&gt;如果一定要基于密码来生成密钥，那么可以通过迭代哈希的方式，来增加字典攻击的难度，例如H(H(H(&amp;hellip;H(password)&amp;hellip;)))。&lt;/p&gt;
&lt;h2 id=&#34;不要使用不安全的密钥长度&#34;&gt;不要使用不安全的密钥长度&lt;/h2&gt;
&lt;p&gt;确保使用足够长的密钥，比如1024-bit 的 RSA 密钥在2010年左右已被证实不安全，建议使用至少 2048 长度的 RSA 密钥。&lt;/p&gt;
&lt;p&gt;对于对称密码而言，应使用 128-bit 以上的密钥。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EncryptedSharedPreferences分析</title>
      <link>https://urchinzhou.com/post/encryptedsharedpreferences%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 06 Jul 2021 22:28:23 +0800</pubDate>
      
      <guid>https://urchinzhou.com/post/encryptedsharedpreferences%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;EncryptedSharedPreferenes 是 androidx 下安全组件中的加密类，实现&lt;code&gt;SharedPreferences&lt;/code&gt;的键值对加密。&lt;/p&gt;
&lt;p&gt;开发者文档中提供了&lt;code&gt;SharedPreferences&lt;/code&gt;加密键值对的实例代码，其中使用&lt;code&gt;MasterKeys&lt;/code&gt;来进行密钥管理，而在 &lt;a href=&#34;https://developer.android.com/reference/androidx/security/crypto/MasterKeys?hl=zh-cn&#34;&gt;MasterKeys&lt;/a&gt; 的文档中提示该类已废弃，应使用&lt;code&gt;MasterKey.Builder&lt;/code&gt;来管理主密钥（版本说明：基于 Jetpack Security 1.1.0-alpha01），示例如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;c1&#34;&gt;// this is equivalent to using deprecated MasterKeys.AES256_GCM_SPEC
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyGenParameterSpec&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyGenParameterSpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;MASTER_KEY_ALIAS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;KeyProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;PURPOSE_ENCRYPT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;PURPOSE_DECRYPT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setBlockModes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KeyProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;BLOCK_MODE_GCM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setEncryptionPaddings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KeyProperties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ENCRYPTION_PADDING_NONE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setKeySize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KEY_SIZE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;n&#34;&gt;MasterKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;masterKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MasterKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MainActivity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setKeyGenParameterSpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;n&#34;&gt;EncryptedSharedPreferences&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;MainActivity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;s&#34;&gt;&amp;#34;your-app-preferences-name&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;masterKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// masterKey created above
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;n&#34;&gt;EncryptedSharedPreferences&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;PrefKeyEncryptionScheme&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;AES256_SIV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;EncryptedSharedPreferences&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;PrefValueEncryptionScheme&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;AES256_GCM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>关于xlog加密处理分析</title>
      <link>https://urchinzhou.com/post/%E5%85%B3%E4%BA%8Exlog%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 06 Jul 2021 22:25:57 +0800</pubDate>
      
      <guid>https://urchinzhou.com/post/%E5%85%B3%E4%BA%8Exlog%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;xlog 使用微型加密算法（TEA，Tiny Encryption Algorithm）对日志数据进行加密，使用 ECDH 密钥交换算法进行对称密钥的协商，对称密钥以数组形式存储在栈区，声明为 &lt;code&gt;LogCrypt&lt;/code&gt; 类的私有字段。&lt;/p&gt;
&lt;p&gt;会话密钥长度与椭圆曲线参数相关，xlog 中使用 16 Bytes 密钥。&lt;/p&gt;
&lt;h3 id=&#34;相关接口&#34;&gt;相关接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;uECC_make_key ( client_pubkey, client_pri )
&lt;ul&gt;
&lt;li&gt;生成客户端公私钥对&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;uECC_shared_secret ( svr_pubkey, client_pri, secret )
&lt;ul&gt;
&lt;li&gt;根据服务端公钥与客户端私钥，运算出对称密钥 secret&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;__TeaEncrypt ( log, secret )
&lt;ul&gt;
&lt;li&gt;使用对称密钥加密日志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协商流程&#34;&gt;协商流程：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;client&lt;/code&gt; 调用 &lt;code&gt;uECC_make_key&lt;/code&gt; 生成 pubKeyA 与 priKeyA；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server&lt;/code&gt; 调用 &lt;code&gt;uECC_make_key&lt;/code&gt; 生成 pubKeyB 与 priKeyB；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client&lt;/code&gt; 获取&lt;code&gt;server&lt;/code&gt; 公钥 &lt;code&gt;pubKeyB&lt;/code&gt; ，调用 &lt;code&gt;uECC_shared_secret&lt;/code&gt; 生成对称密钥 &lt;code&gt;secret&lt;/code&gt;；（此处采用 ECDH 密钥交换算法）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server&lt;/code&gt; 获取&lt;code&gt;client&lt;/code&gt; 公钥 &lt;code&gt;pubKeyA&lt;/code&gt; ，调用 &lt;code&gt;uECC_shared_secret&lt;/code&gt; 生成对称密钥 &lt;code&gt;secret&lt;/code&gt;；&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>密码应用基础知识</title>
      <link>https://urchinzhou.com/post/%E5%AF%86%E7%A0%81%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 06 Jul 2021 22:25:17 +0800</pubDate>
      
      <guid>https://urchinzhou.com/post/%E5%AF%86%E7%A0%81%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;对称算法&#34;&gt;对称算法&lt;/h1&gt;
&lt;p&gt;加密密钥能够从解密密钥中推算出来，反过来也成立。在大多数对称算法中，加密解密&lt;strong&gt;密钥是相同的&lt;/strong&gt;。这些算法也叫&lt;strong&gt;秘密密钥算法&lt;/strong&gt;或&lt;strong&gt;单密钥算法&lt;/strong&gt;，它要求发送者和接受者在安全通信之前，商定一个密钥。&lt;/p&gt;
&lt;p&gt;对称算法的安全性依赖于密钥，泄露密钥就意味着任何人都能对消息进行加密解密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分组算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对数据块运算，如果数据长度不够一块，则需要填充；加密之后数据长度可能会变长，某些场景下不适用；需要对数据进行缓存，某些场景下不适用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分组算法的工作模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ECB 模式，最简单，加密长数据有风险；&lt;/li&gt;
&lt;li&gt;CBC 模式，&lt;strong&gt;最常用的工作模式&lt;/strong&gt;，但本身并没有什么优势，单纯因为过去用的人多，属于历史遗留问题；&lt;/li&gt;
&lt;li&gt;OFB 模式，效果类似于流密码，适合处理音视频数据；&lt;/li&gt;
&lt;li&gt;CFB 模式，效果类似于流密码，几乎没人用；&lt;/li&gt;
&lt;li&gt;CTR 模式，可并行加速，只要有条件就推荐使用，广泛应用于 ATM 网络安全和 IPSec 应用中；&lt;/li&gt;
&lt;li&gt;GCM、CCM 认证加密模式，既能加密又能防篡改防重放；&lt;/li&gt;
&lt;li&gt;XTS 存储加密模式，适合随机读写模式；&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>

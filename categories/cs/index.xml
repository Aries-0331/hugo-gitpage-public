<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs on Aries notebook</title>
    <link>https://arieszhou.xyz/categories/cs/</link>
    <description>Recent content in cs on Aries notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Mar 2022 13:28:32 +0800</lastBuildDate>
    
	<atom:link href="https://arieszhou.xyz/categories/cs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux IPC</title>
      <link>https://arieszhou.xyz/post/linux-ipc/</link>
      <pubDate>Wed, 23 Mar 2022 13:28:32 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/linux-ipc/</guid>
      <description>IPC（进程间通信），是 Linux 系统中不同进程间进行数据交换的机制。主要包括 管道（Pipe）：主要用于父子进程通信，分为匿名管道和命名管道（FIF</description>
    </item>
    
    <item>
      <title>粘包问题</title>
      <link>https://arieszhou.xyz/post/%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 22 May 2021 22:26:31 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>首先，粘包并不是 TCP 的问题。搜索引擎中列出的各种关于“TCP 粘包问题”的文章，所讲的其实是采用 TCP 传输数据的应用层协议设计不合理导致的粘包问题，</description>
    </item>
    
    <item>
      <title>关于数据分片与分段</title>
      <link>https://arieszhou.xyz/post/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E4%B8%8E%E5%88%86%E6%AE%B5/</link>
      <pubDate>Tue, 27 Apr 2021 22:25:41 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E4%B8%8E%E5%88%86%E6%AE%B5/</guid>
      <description>链路层要求数据帧的长度最大值为 1500 字节，该特性被称为 MTU，即最大传输单元。当 IP 层的数据报大于 MTU 时，IP 层就需要进行分片，就是把数据报分成若干</description>
    </item>
    
    <item>
      <title>关于gcc编译时函数符号导出的问题</title>
      <link>https://arieszhou.xyz/post/%E5%85%B3%E4%BA%8Egcc%E7%BC%96%E8%AF%91%E6%97%B6%E5%87%BD%E6%95%B0%E7%AC%A6%E5%8F%B7%E5%AF%BC%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 10 Apr 2021 22:26:17 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/%E5%85%B3%E4%BA%8Egcc%E7%BC%96%E8%AF%91%E6%97%B6%E5%87%BD%E6%95%B0%E7%AC%A6%E5%8F%B7%E5%AF%BC%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;背景：在 Android P liblog 模块中增加一个功能，涉及外部函数调用。如在 &lt;code&gt;A.c&lt;/code&gt; 中定义函数 &lt;code&gt;fun&lt;/code&gt;，在 &lt;code&gt;A.h&lt;/code&gt; 中声明函数 &lt;code&gt;fun&lt;/code&gt;，在 &lt;code&gt;B.c&lt;/code&gt; 中包含 &lt;code&gt;A.h&lt;/code&gt; 后调用 &lt;code&gt;fun&lt;/code&gt;，文件名、路径等均没有问题，但编译时会触发 &lt;code&gt;error:undefined reference to &lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;分析：函数显然是定义了的，提示未定义应该是出于某种原因未找到。后发现 &lt;code&gt;logprint.c&lt;/code&gt; 文件中部分函数带有前缀 &lt;code&gt;LIBLOG_ABI_PUBLIC&lt;/code&gt;，该宏定义为 &lt;code&gt;#define LIBLOG_ABI_PUBLIC __attribute__((visibility(&amp;quot;default&amp;quot;)))&lt;/code&gt;，作用是设置符号的可见性属性，查看 liblog 的 Android.bp 文件，发现编译选项设置为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;nl&#34;&gt;cflags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;-Werror&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;-fvisibility=hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;......&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可见性属性会覆盖编译时通过 &lt;code&gt;-fvisibility&lt;/code&gt; 选项指定的值，&lt;code&gt;default&lt;/code&gt; 可见性属性会使符号在所有情况下都被输出，&lt;code&gt;hidden&lt;/code&gt; 可见性属性会隐藏相应的符号。&lt;/p&gt;
&lt;p&gt;结论：该模块在编译时，通过编译选项 &lt;code&gt;&amp;quot;-fvisibility=hidden&amp;quot;&lt;/code&gt; 将符号的默认可见性属性设置为不可见，因此，对于源文件中没有显示声明为可见的函数或变量，无法被共享库的其它文件访问，从而导致编译时触发 &lt;code&gt;error:undefined reference to &lt;/code&gt;，解决办法是将需要对外共享的函数、变量的可见性属性标识为 &lt;code&gt;default&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;参考阅读：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://my.huhoo.net/archives/2010/03/post_52.html&#34;&gt;控制符号的可见性&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTPS与HTTP</title>
      <link>https://arieszhou.xyz/post/https%E4%B8%8Ehttp/</link>
      <pubDate>Thu, 22 Oct 2020 22:28:02 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/https%E4%B8%8Ehttp/</guid>
      <description>概念上理清 HTTPS 与 HTTP 的区别。 在互联网协议套件中，将网络协议分为四层，从下至上依次为链路层-网络层-传输层-应用层，HTTP 属于应用层协议。中文名</description>
    </item>
    
    <item>
      <title>What happens when tcp listen to a port?</title>
      <link>https://arieszhou.xyz/post/tcp/</link>
      <pubDate>Mon, 29 Jun 2020 18:24:09 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/tcp/</guid>
      <description>When reading the net/http code of golang, I was suddenly curious about the mechanism of tcp listen, then I googled and found this interesting Q&amp;amp;A - What happens when we say &amp;ldquo;listen to a port&amp;rdquo;? on StackOverflow.
 Q:When we start a server application, we always need to speicify the port number it listens to. But how is this &amp;ldquo;listening mechanism&amp;rdquo; implemented under the hood?
My current imagination is like this:</description>
    </item>
    
    <item>
      <title>TLS</title>
      <link>https://arieszhou.xyz/post/tls%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Sun, 02 Feb 2020 22:24:45 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/tls%E5%8D%8F%E8%AE%AE/</guid>
      <description>TLS 协议的设计目标 构建一个安全传输层（Transport Layer Security），在基于连接的传输层（如 TCP）之上提供密码学安全，包括 机密性，信</description>
    </item>
    
  </channel>
</rss>
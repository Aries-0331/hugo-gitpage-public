<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>languages on Aries notebook</title>
    <link>https://arieszhou.xyz/categories/languages/</link>
    <description>Recent content in languages on Aries notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Apr 2024 17:56:05 +0800</lastBuildDate>
    
	<atom:link href="https://arieszhou.xyz/categories/languages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Object.is in JavaScript</title>
      <link>https://arieszhou.xyz/post/object.is-in-javascript/</link>
      <pubDate>Wed, 03 Apr 2024 17:56:05 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/object.is-in-javascript/</guid>
      <description>Object.is is a method introduced in ECMAScript 2015 (ES6) that determines whether two values are the same value. It&amp;rsquo;s a more precise comparison than the traditional == (loose equality) or === (strict equality) operators in JavaScript. Object.is aims to provide an accurate comparison algorithm, particularly useful for distinguishing between values like +0 and -0, and for correctly identifying NaN values, which traditional comparisons cannot.
Syntax 1  Object.is(value1, value2);    value1: The first value to compare.</description>
    </item>
    
    <item>
      <title>Go Package - gorm</title>
      <link>https://arieszhou.xyz/post/go-package-gorm/</link>
      <pubDate>Sun, 12 Mar 2023 22:15:12 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/go-package-gorm/</guid>
      <description>GORM is a popular Object-Relational Mapping (ORM) package for Go, designed to simplify database operations and improve developer productivity. It provides a robust and expressive API for interacting with various databases, including PostgreSQL, MySQL, SQLite, and more. With GORM, you can focus on your application&amp;rsquo;s logic while it handles the complexities of database management.
Main Usage of GORM:
 Model Definition: GORM allows you to define models, which are Go structs representing database tables.</description>
    </item>
    
    <item>
      <title>Go Basic - Interface as Parameter to Function</title>
      <link>https://arieszhou.xyz/post/go-basic-interface-as-parameter-to-function/</link>
      <pubDate>Wed, 01 Mar 2023 17:50:27 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/go-basic-interface-as-parameter-to-function/</guid>
      <description>https://stackoverflow.com/questions/20314604/go-syntax-and-interface-as-parameter-to-function
 Go uses interfaces for generalization of types. So if you want a function that takes a specific interface you write
1  func MyFunction(t SomeInterface) {...}   Every type that satisfies SomeInterface can be passed to MyFunction.
Now, SomeInterface can look like this:
1 2 3  type SomeInterface interface { SomeFunction() }   To satisfy SomeInterface, the type implementing it must implement SomeFunction().
If you, however, require an empty interface (interface{}) the object does not need to implement any method to be passed to the function:</description>
    </item>
    
    <item>
      <title>Go Package - gorilla mux</title>
      <link>https://arieszhou.xyz/post/go-package-gorilla-mux/</link>
      <pubDate>Wed, 22 Feb 2023 17:00:03 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/go-package-gorilla-mux/</guid>
      <description>Gorilla/mux is a popular package in the Go ecosystem that simplifies routing and URL matching for HTTP services. It offers a rich set of features and allows developers to define custom routes, handle variables, and leverage middleware for enhanced functionality. With gorilla/mux, you can build scalable and maintainable web applications with ease.
Main Usage of gorilla/mux:
 Routing: Gorilla/mux enables you to define powerful and dynamic routes by leveraging patterns, placeholders, and regular expressions.</description>
    </item>
    
    <item>
      <title>JavaScript 模板</title>
      <link>https://arieszhou.xyz/post/javascript-%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Fri, 30 Dec 2022 11:06:43 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/javascript-%E6%A8%A1%E6%9D%BF/</guid>
      <description>在JavaScript中，模板是指结合数据来生成 HTML 标记或其他文本的技术，模板通过声明式的标记语法允许你指定如何将对象属性插入到文档中。这种方</description>
    </item>
    
    <item>
      <title>JavsScript 原型链</title>
      <link>https://arieszhou.xyz/post/javsscript-%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Mon, 24 Oct 2022 20:36:26 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/javsscript-%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>每个 JavaScript 对象都有一个指向其他对象的链接，这个链接就是我们所说的“原型”。当我们试图访问一个对象的属性或方法时，如果它自身没有这个属性或方法，J</description>
    </item>
    
    <item>
      <title>闭包</title>
      <link>https://arieszhou.xyz/post/%E9%97%AD%E5%8C%85/</link>
      <pubDate>Wed, 24 Aug 2022 13:13:04 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/%E9%97%AD%E5%8C%85/</guid>
      <description>初步理解闭包 接触 JavaScript 的闭包概念前，我在阅读部分前端项目代码时，下意识带着阅读 C++ 代码时的思维惯性来分析 JavaScript 代码，从而造成对一些变量的值，做出错误判</description>
    </item>
    
    <item>
      <title>JavsScript 高阶函数</title>
      <link>https://arieszhou.xyz/post/javsscript-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 24 Apr 2022 21:14:54 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/javsscript-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>在 JavaScript 中，如果一个函数能接收一个或多个函数作为参数，或返回另一个函数，那么该函数被称为高阶函数。 高阶函数是函数式编程的一个重要概念，提供了极大</description>
    </item>
    
    <item>
      <title>JavsScript 箭头函数</title>
      <link>https://arieszhou.xyz/post/javsscript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 24 Jan 2022 21:40:30 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/javsscript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>箭头函数 箭头函数是 ES6 (ECMAScript 2015) 引入的一个新增特性，提供了一种更简洁的方式来写函数表达式。它不仅语法简短，而且还有其他几个特别之处，特别是与this</description>
    </item>
    
    <item>
      <title>JavsScript ES6</title>
      <link>https://arieszhou.xyz/post/javsscript-es6/</link>
      <pubDate>Fri, 17 Dec 2021 21:30:48 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/javsscript-es6/</guid>
      <description>ES6（ECMAScript 2015 或 ECMAScript6）与 ES5 主要区别： 1. 变量声明 ES5: 只有 var 关键字用于变量声明，它有函数作用域或全局作用域。 ES6: 引</description>
    </item>
    
    <item>
      <title>一个野指针</title>
      <link>https://arieszhou.xyz/post/%E6%8C%87%E9%92%88/</link>
      <pubDate>Sun, 23 Aug 2020 22:29:13 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/%E6%8C%87%E9%92%88/</guid>
      <description>1 2 3 //常见错误 int *a; *a = 12; 该代码段，声明了一个名为 a 的指针变量，之后将 12 存储在 a 所指向的空间中。 声明了变量 a，但未对其初始化，所以并不知道</description>
    </item>
    
  </channel>
</rss>
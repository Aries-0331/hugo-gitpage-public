<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TCP/IP on Aries notebook</title>
    <link>https://arieszhou.xyz/categories/tcp/ip/</link>
    <description>Recent content in TCP/IP on Aries notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	<atom:link href="https://arieszhou.xyz/categories/tcp/ip/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>粘包问题</title>
      <link>https://arieszhou.xyz/post/%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 22 May 2021 22:26:31 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>首先，粘包并不是 TCP 的问题。搜索引擎中列出的各种关于“TCP 粘包问题”的文章，所讲的其实是采用 TCP 传输数据的应用层协议设计不合理导致的粘包问题，</description>
    </item>
    
    <item>
      <title>关于数据分片与分段</title>
      <link>https://arieszhou.xyz/post/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E4%B8%8E%E5%88%86%E6%AE%B5/</link>
      <pubDate>Tue, 27 Apr 2021 22:25:41 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E4%B8%8E%E5%88%86%E6%AE%B5/</guid>
      <description>链路层要求数据帧的长度最大值为 1500 字节，该特性被称为 MTU，即最大传输单元。当 IP 层的数据报大于 MTU 时，IP 层就需要进行分片，就是把数据报分成若干</description>
    </item>
    
    <item>
      <title>What happens when tcp listen to a port?</title>
      <link>https://arieszhou.xyz/post/tcp/</link>
      <pubDate>Mon, 29 Jun 2020 18:24:09 +0800</pubDate>
      
      <guid>https://arieszhou.xyz/post/tcp/</guid>
      <description>When reading the net/http code of golang, I was suddenly curious about the mechanism of tcp listen, then I googled and found this interesting Q&amp;amp;A - What happens when we say &amp;ldquo;listen to a port&amp;rdquo;? on StackOverflow.
 Q:When we start a server application, we always need to speicify the port number it listens to. But how is this &amp;ldquo;listening mechanism&amp;rdquo; implemented under the hood?
My current imagination is like this:</description>
    </item>
    
  </channel>
</rss>
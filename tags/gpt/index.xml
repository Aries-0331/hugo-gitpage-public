<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gpt on Aries notebook</title>
    <link>https://urchinzhou.com/tags/gpt/</link>
    <description>Recent content in Gpt on Aries notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 12 Mar 2023 22:15:12 +0800</lastBuildDate>
    <atom:link href="https://urchinzhou.com/tags/gpt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Package - gorm</title>
      <link>https://urchinzhou.com/post/go-package---gorm/</link>
      <pubDate>Sun, 12 Mar 2023 22:15:12 +0800</pubDate>
      <guid>https://urchinzhou.com/post/go-package---gorm/</guid>
      <description>GORM is a popular Object-Relational Mapping (ORM) package for Go, designed to simplify database operations and improve developer productivity. It provides a robust and expressive API for interacting with various databases, including PostgreSQL, MySQL, SQLite, and more. With GORM, you can focus on your application&amp;rsquo;s logic while it handles the complexities of database management.&#xA;Main Usage of GORM:&#xA;Model Definition: GORM allows you to define models, which are Go structs representing database tables.</description>
    </item>
    <item>
      <title>Go Basic - Interface as Parameter to Function</title>
      <link>https://urchinzhou.com/post/go-basic---interface-as-parameter-to-function/</link>
      <pubDate>Wed, 01 Mar 2023 17:50:27 +0800</pubDate>
      <guid>https://urchinzhou.com/post/go-basic---interface-as-parameter-to-function/</guid>
      <description>https://stackoverflow.com/questions/20314604/go-syntax-and-interface-as-parameter-to-function&#xA;Go uses interfaces for generalization of types. So if you want a function that takes a specific interface you write&#xA;1 func MyFunction(t SomeInterface) {...} Every type that satisfies SomeInterface can be passed to MyFunction.&#xA;Now, SomeInterface can look like this:&#xA;1 2 3 type SomeInterface interface { SomeFunction() } To satisfy SomeInterface, the type implementing it must implement SomeFunction().&#xA;If you, however, require an empty interface (interface{}) the object does not need to implement any method to be passed to the function:</description>
    </item>
    <item>
      <title>Go Package - gorilla mux</title>
      <link>https://urchinzhou.com/post/go-package---gorilla-mux/</link>
      <pubDate>Wed, 22 Feb 2023 17:00:03 +0800</pubDate>
      <guid>https://urchinzhou.com/post/go-package---gorilla-mux/</guid>
      <description>Gorilla/mux is a popular package in the Go ecosystem that simplifies routing and URL matching for HTTP services. It offers a rich set of features and allows developers to define custom routes, handle variables, and leverage middleware for enhanced functionality. With gorilla/mux, you can build scalable and maintainable web applications with ease.&#xA;Main Usage of gorilla/mux:&#xA;Routing: Gorilla/mux enables you to define powerful and dynamic routes by leveraging patterns, placeholders, and regular expressions.</description>
    </item>
    <item>
      <title>Mastering ChatGPTï¼šCrafting Effective Prompt</title>
      <link>https://urchinzhou.com/post/mastering-chatgptcrafting-effective-prompt/</link>
      <pubDate>Mon, 23 Jan 2023 21:59:23 +0800</pubDate>
      <guid>https://urchinzhou.com/post/mastering-chatgptcrafting-effective-prompt/</guid>
      <description>Introduction: Engaging in conversations with AI models like ChatGPT can be an exciting and rewarding experience. However, achieving meaningful and accurate responses relies heavily on the quality of prompts provided. In this blog post, we will explore strategies for crafting excellent prompts that maximize the potential of ChatGPT and enhance the overall conversation. Let&amp;rsquo;s dive in and unlock the power of effective prompts!&#xA;Be Clear and Specific: Clearly communicate your intention and provide specific context in your prompts.</description>
    </item>
  </channel>
</rss>
